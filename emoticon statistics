{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyPlo47xzGyycm4kG0YW/pjw"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":null,"metadata":{"id":"s48hqGOHebuj"},"outputs":[],"source":["import json\n","import os\n","import re\n","from collections import defaultdict\n","from datetime import datetime, timedelta\n","\n","import matplotlib.pyplot as plt\n","import numpy as np\n","from sklearn.feature_extraction import DictVectorizer\n","from sklearn.linear_model import (\n","    LinearRegression,\n","    LogisticRegression,\n","    Ridge,\n","    SGDRegressor,\n",")\n","from sklearn.metrics import confusion_matrix\n","from sklearn.model_selection import cross_val_score, train_test_split\n","from sklearn.multioutput import MultiOutputRegressor\n","from sklearn.preprocessing import LabelEncoder\n","from sklearn.svm import SVR\n","\n","EMOTES7TV = set(\n","    [\n","        \"catJAM\",\n","        \"GIGACHAD\",\n","        \"catKISS\",\n","        \"BOOBA\",\n","        \"NOOO\",\n","        \"Sadge\",\n","        \"modCheck\",\n","        \"COPIUM\",\n","        \"KEKW\",\n","        \"Prayge\",\n","        \"Bedge\",\n","        \"NODDERS\",\n","        \"OMEGALUL\",\n","        \"peepoLeave\",\n","        \"SUSSY\",\n","        \"Madge\",\n","        \"peepoHey\",\n","        \"donowall\",\n","        \"DIESOFCRINGE\",\n","        \"peepoArrive\",\n","        \"Clueless\",\n","        \"Hmm\",\n","        \"peepoDJ\",\n","        \"pepeJAM\",\n","        \"ratJAM\",\n","        \"peepoClap\",\n","        \"Aware\",\n","        \"Susge\",\n","        \"Nerdge\",\n","        \"POGGIES\",\n","        \"peepoGiggles\",\n","        \"YEP\",\n","        \"LETSGO\",\n","        \"muted\",\n","        \"NOPERS\",\n","        \"PepegaAim\",\n","        \"Clap\",\n","        \"xdd\",\n","        \"monkaW\",\n","        \"PETTHEMODS\",\n","        \"WICKED\",\n","        \"Pog\",\n","        \"peepoShy\",\n","        \"Okayge\",\n","        \"dinkDonk\",\n","        \"AINTNOWAY\",\n","        \"PepeLaugh\",\n","        \"wideVIBE\",\n","        \"SadgeCry\",\n","        \"peepoBye\",\n","        \"SNIFFA\",\n","        \"PauseChamp\",\n","        \"Weirdge\",\n","        \"Wokege\",\n","        \"RAGEY\",\n","        \"HACKERMANS\",\n","        \"HUH\",\n","        \"OOOO\",\n","        \"peepoFAT\",\n","        \"POGGERS\",\n","        \"peepoComfy\",\n","        \"TriSad\",\n","        \"SCAMMED\",\n","        \"pepeMeltdown\",\n","        \"peepoRun\",\n","        \"gachiHYPER\",\n","        \"THIS\",\n","        \"peepoLove\",\n","        \"FeelsLagMan\",\n","        \"PepeHands\",\n","        \"Deadge\",\n","        \"FeelsRainMan\",\n","        \"NOTED\",\n","        \"LETHIMCOOK\",\n","        \"ICANT\",\n","        \"Tssk\",\n","        \"rainbowPls\",\n","        \"MODS\",\n","        \"lebronJAM\",\n","        \"blobDance\",\n","        \"WHAT\",\n","        \"peepoSleep\",\n","        \"peepoSit\",\n","        \"ppOverheat\",\n","        \"NOWAYING\",\n","        \"COCKA\",\n","        \"AlienPls3\",\n","        \"borpaSpin\",\n","        \"EZ\",\n","        \"Dance\",\n","        \"TROLL\",\n","        \"Binoculars\",\n","        \"peepoFine\",\n","        \"AlienPls\",\n","        \"sadKEK\",\n","        \"MONKE\",\n","        \"peepoBlush\",\n","        \"pepegaCard\",\n","        \"FLASHBANG\",\n","        \"hmmMeeting\",\n","    ]\n",")\n","EMOTESBETTERTTV = set(\n","    [\n","        \"catJAM\",\n","        \"monkaS\",\n","        \"omegaLUL\",\n","        \"Clap\",\n","        \"KEKW\",\n","        \"EZ\",\n","        \"POGGERS\",\n","        \"PepeHands\",\n","        \"pepeJAM\",\n","        \"Pepega\",\n","        \"Sadge\",\n","        \"pepeD\",\n","        \"PogU\",\n","        \"5Head\",\n","        \"PepeLaugh\",\n","        \"PepePls\",\n","        \"blobDance\",\n","        \"modCheck\",\n","        \"monkaW\",\n","        \"peepoClap\",\n","        \"AYAYA\",\n","        \"gachiHYPER\",\n","        \"PegegaAim\",\n","        \"weirdChamp\",\n","        \"popCat\",\n","        \"gachiBASS\",\n","        \"peepoLeave\",\n","        \"RainbowPls\",\n","        \"bongoTap\",\n","        \"ratJAM\",\n","        \"pepeLaugh\",\n","        \"peepoShy\",\n","        \"pressF\",\n","        \"ricardoFlick\",\n","        \"peepoArrive\",\n","        \"LULW\",\n","        \"Dance\",\n","        \"PeepoDance\",\n","        \"NODDERS\",\n","        \"Pog\",\n","        \"HYPERS\",\n","        \"NOPERS\",\n","        \"peepoHappy\",\n","        \"monkaHmm\",\n","        \"peepoHey\",\n","        \"PauseChamp\",\n","        \"sumSmash\",\n","        \"WAYTOODANK\",\n","        \"DonoWall\",\n","        \"ddHuh\",\n","        \"WeSmart\",\n","        \"MYAA\",\n","        \"(ditto)\",\n","        \"monkaX\",\n","        \"catKISS\",\n","        \"peepoPooPoo\",\n","        \"peepoRun\",\n","        \"pugPls\",\n","        \"ThisIsFine\",\n","        \"monkaSTEER\",\n","        \"PartyKirby\",\n","        \"pepeMeltdown\",\n","        \"monkaTOS\",\n","        \"POGSLIDE\",\n","        \"OOOO\",\n","        \"FeelsRainMan\",\n","        \"PETTHEPEEPO\",\n","        \"WaitWhat\",\n","        \"ppOverheat\",\n","        \"peepoLove\",\n","        \"PeepoNoob\",\n","        \"ppJedi\",\n","        \"gachiGASM\",\n","        \"pepeJAMJAM\",\n","        \"HACKERMANS\",\n","        \"peepoSimp\",\n","        \"lickR\",\n","        \"peepoSad\",\n","        \"HYPERCLAP\",\n","        \"monkaSHAKE\",\n","        \"confusedCat\",\n","        \"NOOO\",\n","        \"KEKWlaugh\",\n","        \"RareParrot\",\n","        \"peepoGiggles\",\n","        \"lickL\",\n","        \"monkaGun\",\n","        \"VIBE\",\n","        \"COGGERS\",\n","        \"TeaTime\",\n","        \"pepoG\",\n","        \"TriKool\",\n","        \"sadCat\",\n","        \"kumaPls\",\n","        \"COPIUM\",\n","        \"BoneZone\",\n","        \"Prayge\",\n","        \"peepoRiot\",\n","        \"200IQ\",\n","        \"AlienPls\",\n","        \"hypeE\",\n","    ]\n",")\n","\n","GLOBAL_EMOTES = set(\n","    [\n","        \"4Head\",\n","        \"8-)\",\n","        \":(\",\n","        \":)\",\n","        \":-(\",\n","        \":-)\",\n","        \":-/\",\n","        \":-D\",\n","        \":-O\",\n","        \":-P\",\n","        \":-Z\",\n","        \":-\\\\\",\n","        \":-o\",\n","        \":-p\",\n","        \":-z\",\n","        \":-|\",\n","        \":/\",\n","        \":D\",\n","        \":O\",\n","        \":P\",\n","        \":Z\",\n","        \":\\\\\",\n","        \":o\",\n","        \":p\",\n","        \":z\",\n","        \":|\",\n","        \";)\",\n","        \";-)\",\n","        \";-P\",\n","        \";P\",\n","        \";p\",\n","        \"<3\",\n","        \">(\",\n","        \"ANELE\",\n","        \"ArgieB8\",\n","        \"ArsonNoSexy\",\n","        \"AsexualPride\",\n","        \"AsianGlow\",\n","        \"B)\",\n","        \"B-)\",\n","        \"BabyRage\",\n","        \"BatChest\",\n","        \"BCWarrior\",\n","        \"BegWan\",\n","        \"BibleThump\",\n","        \"BigBrother\",\n","        \"BigPhish\",\n","        \"BisexualPride\",\n","        \"BlackLivesMatter\",\n","        \"BlargNaut\",\n","        \"bleedPurple\",\n","        \"BloodTrail\",\n","        \"BlowTheWhistle\",\n","        \"BOP\",\n","        \"BrainSlug\",\n","        \"BrokeBack\",\n","        \"BuddhaBar\",\n","        \"CaitlynS\",\n","        \"CarlSmile\",\n","        \"ChefFrank\",\n","        \"cmonBruh\",\n","        \"CoolCat\",\n","        \"CoolStoryBob\",\n","        \"copyThis\",\n","        \"CorgiDerp\",\n","        \"CrreamAwk\",\n","        \"CurseLit\",\n","        \"DAESuppy\",\n","        \"DansGame\",\n","        \"DarkKnight\",\n","        \"DarkMode\",\n","        \"DatSheffy\",\n","        \"DBstyle\",\n","        \"DendiFace\",\n","        \"DinoDance\",\n","        \"DogFace\",\n","        \"DoritosChip\",\n","        \"duDudu\",\n","        \"DxCat\",\n","        \"EarthDay\",\n","        \"EleGiggle\",\n","        \"EntropyWins\",\n","        \"ExtraLife\",\n","        \"FailFish\",\n","        \"FailCry\",\n","        \"FallHalp\",\n","        \"FallWinning\",\n","        \"FamilyMan\",\n","        \"FBBlock\",\n","        \"FBCatch\",\n","        \"FBChallenge\",\n","        \"FBPass\",\n","        \"FBPenalty\",\n","        \"FBRun\",\n","        \"FBSpiral\",\n","        \"FBtouchdown\",\n","        \"FlawlessVictory\",\n","        \"FootBall\",\n","        \"FootGoal\",\n","        \"FootYellow\",\n","        \"ForSigmar\",\n","        \"FrankerZ\",\n","        \"FreakinStinkin\",\n","        \"FUNgineer\",\n","        \"FutureMan\",\n","        \"GayPride\",\n","        \"GenderFluidPride\",\n","        \"Getcamped\",\n","        \"GingerPower\",\n","        \"GivePLZ\",\n","        \"GlitchCat\",\n","        \"GlitchLit\",\n","        \"GlitchNRG\",\n","        \"GrammarKing\",\n","        \"GunRun\",\n","        \"HarleyWink\",\n","        \"HassaanChop\",\n","        \"HeyGuys\",\n","        \"HolidayCookie\",\n","        \"HolidayLog\",\n","        \"HolidayPresent\",\n","        \"HolidaySanta\",\n","        \"HolidayTree\",\n","        \"HotPokket\",\n","        \"HSCheers\",\n","        \"HSWP\",\n","        \"HungryPaimon\",\n","        \"imGlitch\",\n","        \"ImTyping\",\n","        \"IntersexPride\",\n","        \"InuyoFace\",\n","        \"ItsBoshyTime\",\n","        \"Jebaited\",\n","        \"Jebasted\",\n","        \"JKanStyle\",\n","        \"JonCarnage\",\n","        \"JonesyW\",\n","        \"KAPOW\",\n","        \"Kappa\",\n","        \"KappaClaus\",\n","        \"KappaPride\",\n","        \"KappaRoss\",\n","        \"KappaWealth\",\n","        \"Kappu\",\n","        \"Keepo\",\n","        \"KEKHeim\",\n","        \"KevinTurtle\",\n","        \"Kippa\",\n","        \"KomodoHype\",\n","        \"KonCha\",\n","        \"Kreygasm\",\n","        \"LaundryBasket\",\n","        \"Lechonk\",\n","        \"LesbianPride\",\n","        \"LionOfYara\",\n","        \"LUL\",\n","        \"Mau5\",\n","        \"MaxLOL\",\n","        \"mcaT\",\n","        \"MechaRobot\",\n","        \"MercyWing1\",\n","        \"MercyWing2\",\n","        \"MikeHogu\",\n","        \"MingLee\",\n","        \"ModLove\",\n","        \"MorphinTime\",\n","        \"MrDestructoid\",\n","        \"MVGame\",\n","        \"MyAvatar\",\n","        \"NewRecord\",\n","        \"NiceTry\",\n","        \"NinjaGrumpy\",\n","        \"NomNom\",\n","        \"NonBinaryPride\",\n","        \"NotATK\",\n","        \"NotLikeThis\",\n","        \"O.O\",\n","        \"o.o\",\n","        \"o.O\",\n","        \"O.o\",\n","        \"o_o\",\n","        \"o_O\",\n","        \"O_O\",\n","        \"O_o\",\n","        \"OhMyDog\",\n","        \"OneHand\",\n","        \"OpieOP\",\n","        \"OptimizePrime\",\n","        \"OSFrog\",\n","        \"panicBasket\",\n","        \"PanicVis\",\n","        \"PansexualPride\",\n","        \"PartyHat\",\n","        \"PartyTime\",\n","        \"pastaThat\",\n","        \"PeoplesChamp\",\n","        \"PermaSmug\",\n","        \"PicoMause\",\n","        \"PikaRamen\",\n","        \"PinkMercy\",\n","        \"PipeHype\",\n","        \"PixelBob\",\n","        \"PizzaTime\",\n","        \"PJSalt\",\n","        \"PJSugar\",\n","        \"PMSTwin\",\n","        \"PogBones\",\n","        \"PogChamp\",\n","        \"Poooound\",\n","        \"PopCorn\",\n","        \"PopNemo\",\n","        \"PoroSad\",\n","        \"PotFriend\",\n","        \"PowerUpL\",\n","        \"PowerUpR\",\n","        \"PraiseIt\",\n","        \"PRChase\",\n","        \"PrimeMe\",\n","        \"PunchTrees\",\n","        \"PunOko\",\n","        \"R)\",\n","        \"R-)\",\n","        \"RaccAttack\",\n","        \"RalpherZ\",\n","        \"RedCoat\",\n","        \"ResidentSleeper\",\n","        \"riPepperonis\",\n","        \"RitzMitz\",\n","        \"RlyTho\",\n","        \"RuleFive\",\n","        \"RyuChamp\",\n","        \"SabaPing\",\n","        \"SeemsGood\",\n","        \"SeriousSloth\",\n","        \"ShadyLulu\",\n","        \"ShazBotstix\",\n","        \"Shush\",\n","        \"SingsMic\",\n","        \"SingsNote\",\n","        \"SmoocherZ\",\n","        \"SMOrc\",\n","        \"SoBayed\",\n","        \"SoonerLater\",\n","        \"Squid1\",\n","        \"Squid2\",\n","        \"Squid3\",\n","        \"Squid4\",\n","        \"SSSsss\",\n","        \"StinkyCheese\",\n","        \"StinkyGlitch\",\n","        \"StoneLightning\",\n","        \"StrawBeary\",\n","        \"SUBprise\",\n","        \"SuperVinlin\",\n","        \"SwiftRage\",\n","        \"TakeNRG\",\n","        \"TBAngel\",\n","        \"TearGlove\",\n","        \"TehePelo\",\n","        \"TF2John\",\n","        \"ThankEgg\",\n","        \"TheIlluminati\",\n","        \"TheRinger\",\n","        \"TheTarFu\",\n","        \"TheThing\",\n","        \"ThunBeast\",\n","        \"TinyFace\",\n","        \"TombRaid\",\n","        \"TooSpicy\",\n","        \"TPcrunchyroll\",\n","        \"TPFufun\",\n","        \"TransgenderPride\",\n","        \"TriHard\",\n","        \"TTours\",\n","        \"TwitchConHYPE\",\n","        \"TwitchLit\",\n","        \"twitchRaid\",\n","        \"TwitchRPG\",\n","        \"TwitchSings\",\n","        \"TwitchUnity\",\n","        \"TwitchVotes\",\n","        \"UncleNox\",\n","        \"UnSane\",\n","        \"UWot\",\n","        \"VirtualHug\",\n","        \"VoHiYo\",\n","        \"VoteNay\",\n","        \"VoteYea\",\n","        \"WholeWheat\",\n","        \"WhySoSerious\",\n","        \"WTRuck\",\n","        \"WutFace\",\n","        \"YouDontSay\",\n","        \"YouWHY\",\n","    ]\n",")\n","\n","from emotes import NINJA\n","\n","LOWERED_SEVENTV_EMOTES = set(map(lambda t: t.lower(), EMOTES7TV))\n","LOWERED_BETTERTTV_EMOTES = set(map(lambda t: t.lower(), EMOTESBETTERTTV))\n","LOWERED_GLOBAL_EMOTES = set(map(lambda t: t.lower(), GLOBAL_EMOTES))\n","LOWERED_NINJA_EMOTES = set(map(lambda t: t.lower(), NINJA))\n","\n","print(\"Number of emoticons (lowercased):\")\n","print(len(LOWERED_SEVENTV_EMOTES), \"7tv emoticons.\")\n","print(len(LOWERED_BETTERTTV_EMOTES), \"betterttv emoticons.\")\n","print(len(LOWERED_GLOBAL_EMOTES), \"global emoticons.\")\n","print()\n","print(\"Number of overlapping emoticons:\")\n","print(\"All three:\", len(LOWERED_SEVENTV_EMOTES.intersection(LOWERED_BETTERTTV_EMOTES, LOWERED_GLOBAL_EMOTES)))\n","print(\"7tv and betterttv:\", len(LOWERED_SEVENTV_EMOTES.intersection(LOWERED_BETTERTTV_EMOTES)))\n","print(\"7tv and global:\", len(LOWERED_SEVENTV_EMOTES.intersection(LOWERED_GLOBAL_EMOTES)))\n","print(\"betterttv and global:\", len(LOWERED_BETTERTTV_EMOTES.intersection(LOWERED_GLOBAL_EMOTES)))\n","print(\"=====================================\")\n","LOWERED_OVERLAPPING_EMOTES = LOWERED_SEVENTV_EMOTES.intersection(LOWERED_BETTERTTV_EMOTES)\n","\n","global_count = 0\n","betterttv_count = 0\n","seventv_count = 0\n","\n","emote_counts = {}\n","emote_distinct = {}\n","avg_per_segment = {}\n","per_seg_sets = {}\n","emote_per_segment = []\n","length_by_count = {\"length\": [], \"count\": []}\n","\n","\n","def tokenize_emote(doc, streamer):\n","    bow = defaultdict(float)\n","    tokens = doc.split()\n","    lowered_tokens = map(lambda t: t.lower(), tokens)\n","    global emote_counts, emote_distinct\n","    for token in lowered_tokens:\n","        flag = False\n","        if token in LOWERED_GLOBAL_EMOTES:\n","            emote_counts[streamer][\"global\"] += 1\n","            emote_distinct[streamer][\"global\"].add(token)\n","            flag = True\n","        if token in LOWERED_BETTERTTV_EMOTES:\n","            emote_counts[streamer][\"betterttv\"] += 1\n","            emote_distinct[streamer][\"betterttv\"].add(token)\n","            flag = True\n","        if token in LOWERED_SEVENTV_EMOTES:\n","            emote_counts[streamer][\"7tv\"] += 1\n","            emote_distinct[streamer][\"7tv\"].add(token)\n","            flag = True\n","        if token in LOWERED_OVERLAPPING_EMOTES:\n","            emote_counts[streamer][\"overlap\"] += 1\n","            emote_distinct[streamer][\"overlap\"].add(token)\n","            flag = True\n","        if flag:\n","            bow[token] += 1.0\n","    return dict(bow)\n","\n","\n","def tokenize_set(doc, set_name):\n","    bow = defaultdict(float)\n","    tokens = doc.split()\n","    lowered_tokens = map(lambda t: t.lower(), tokens)\n","    for token in lowered_tokens:\n","        if token in set_name:\n","            bow[token] += 1.0\n","    return dict(bow)\n","\n","\n","def tokenize_doc(doc):\n","    bow = defaultdict(float)\n","    tokens = doc.split()\n","    lowered_tokens = map(lambda t: t.lower(), tokens)\n","    for token in lowered_tokens:\n","        bow[token] += 1.0\n","    return dict(bow)\n","\n","\n","DATASET_PATH = \"chat\"\n","streamers = []\n","all_chat_timestamps = {}\n","all_emotes = {}\n","emote_sets = {}\n","for filename in os.listdir(DATASET_PATH):\n","    if filename.endswith(\".txt\"):\n","        print(f\"Tokenizing chat log for {filename}...\")\n","        streamer = filename.split(\".\")[0]\n","        if streamer not in streamers:\n","            streamers.append(streamer)\n","            all_emotes[streamer] = []\n","            emote_sets[streamer] = {\n","                \"global\": [],\n","                \"betterttv\": [],\n","                \"7tv\": [],\n","                \"g-b\": [],\n","                \"g-7\": [],\n","                \"b-7\": [],\n","                \"all\": [],\n","            }\n","            all_chat_timestamps[streamer] = []\n","            emote_counts[streamer] = {\"global\": 0, \"betterttv\": 0, \"7tv\": 0, \"overlap\": 0}\n","            emote_distinct[streamer] = {\"global\": set(), \"betterttv\": set(), \"7tv\": set(), \"overlap\": set()}\n","            avg_per_segment[streamer] = {\n","                \"global\": 0,\n","                \"betterttv\": 0,\n","                \"7tv\": 0,\n","                \"g-b\": 0,\n","                \"g-7\": 0,\n","                \"b-7\": 0,\n","                \"all\": 0,\n","            }\n","        data_file = os.path.join(DATASET_PATH, filename)\n","        # print(data_file)\n","        with open(data_file, \"r\", encoding=\"utf8\") as doc:\n","            for chat in doc:\n","                time_stamp = chat[chat.find(\"[\") + 1 : chat.find(\"]\")]\n","                msg = chat[chat.find(\":\") + 1 :]\n","                # t = datetime.strptime(time_stamp, \"%H:%M:%S\")\n","                # all_chat_timestamps[streamer].append(\n","                #     timedelta(hours=t.hour, minutes=t.minute, seconds=t.second)\n","                # )\n","                t = time_stamp.split(\":\")\n","                all_chat_timestamps[streamer].append(\n","                    timedelta(hours=int(t[0]), minutes=int(t[1]), seconds=int(t[2]))\n","                )\n","                all_emotes[streamer].append(tokenize_emote(msg, streamer))\n","                emote_sets[streamer][\"global\"].append(tokenize_set(msg, LOWERED_GLOBAL_EMOTES))\n","                emote_sets[streamer][\"betterttv\"].append(tokenize_set(msg, LOWERED_BETTERTTV_EMOTES))\n","                emote_sets[streamer][\"7tv\"].append(tokenize_set(msg, LOWERED_SEVENTV_EMOTES))\n","                emote_sets[streamer][\"g-b\"].append(\n","                    tokenize_set(msg, LOWERED_GLOBAL_EMOTES.union(LOWERED_SEVENTV_EMOTES))\n","                )\n","                emote_sets[streamer][\"g-7\"].append(\n","                    tokenize_set(msg, LOWERED_BETTERTTV_EMOTES.union(LOWERED_SEVENTV_EMOTES))\n","                )\n","                emote_sets[streamer][\"b-7\"].append(\n","                    tokenize_set(msg, LOWERED_GLOBAL_EMOTES.union(LOWERED_SEVENTV_EMOTES))\n","                )\n","                emote_sets[streamer][\"all\"].append(all_emotes[streamer][-1])\n","\n","# print([l for l in all_chat_timestamps[\"Ninja_0\"]])\n","# print([d for d in all_emotes[\"Ninja_0\"]])\n","\n","print(streamers)\n","print(\"=====================\")\n","# streamer = \"Ninja_0\"\n","\n","\n","transcript = {}\n","for filename in os.listdir(\"transcripts\"):\n","    if filename.endswith(\".json\") and filename.split(\"_transcript\")[0] in streamers:\n","        print(f\"Found transcript {filename}\")\n","        transcript_file = os.path.join(\"transcripts\", filename)\n","        with open(transcript_file, \"r\") as doc:\n","            transcript[filename.split(\"_transcript\")[0]] = json.load(doc)\n","\n","print(transcript.keys())\n","print(\"=====================\")\n","for streamer in streamers:\n","    print(f\"Number of emotes for {streamer}\")\n","    timestamps = all_chat_timestamps[streamer]\n","    emotes = all_emotes[streamer]\n","\n","    data = []\n","    label = []\n","    label_sets = {\n","        \"global\": [],\n","        \"betterttv\": [],\n","        \"7tv\": [],\n","        \"g-b\": [],\n","        \"g-7\": [],\n","        \"b-7\": [],\n","        \"all\": [],\n","    }\n","    t_index = 0\n","    for i, seg in enumerate(transcript[streamer][\"segments\"]):\n","        start = timedelta(seconds=seg[\"start\"])\n","        end = timedelta(seconds=seg[\"end\"])\n","        data.append((timedelta(seconds=seg[\"start\"]), timedelta(seconds=seg[\"end\"]), seg[\"text\"]))\n","        label.append({})\n","        label_sets[\"global\"].append({})\n","        label_sets[\"betterttv\"].append({})\n","        label_sets[\"7tv\"].append({})\n","        label_sets[\"g-b\"].append({})\n","        label_sets[\"g-7\"].append({})\n","        label_sets[\"b-7\"].append({})\n","        label_sets[\"all\"].append({})\n","        while t_index < len(timestamps) and timestamps[t_index] <= end:\n","            label[i].update(emotes[t_index])\n","            label_sets[\"global\"][i].update(emote_sets[streamer][\"global\"][t_index])\n","            label_sets[\"betterttv\"][i].update(emote_sets[streamer][\"betterttv\"][t_index])\n","            label_sets[\"7tv\"][i].update(emote_sets[streamer][\"7tv\"][t_index])\n","            label_sets[\"g-b\"][i].update(emote_sets[streamer][\"g-b\"][t_index])\n","            label_sets[\"g-7\"][i].update(emote_sets[streamer][\"g-7\"][t_index])\n","            label_sets[\"b-7\"][i].update(emote_sets[streamer][\"b-7\"][t_index])\n","            label_sets[\"all\"][i].update(emote_sets[streamer][\"all\"][t_index])\n","            t_index += 1\n","    length_by_count[\"length\"].append(timestamps[-1].total_seconds() / 3600)\n","    length_by_count[\"count\"].append(sum(sum(l.values()) for l in label))\n","    # print(t_index, len(timestamps), len(emotes))\n","    # print(len(data), len(label))\n","    # print(data)\n","    # print(label)\n","    avg_per_segment[streamer][\"all\"] = np.mean([sum(l.values()) for l in label])\n","    avg_per_segment[streamer][\"global\"] = np.mean([sum(l.values()) for l in label_sets[\"global\"]])\n","    avg_per_segment[streamer][\"betterttv\"] = np.mean([sum(l.values()) for l in label_sets[\"betterttv\"]])\n","    avg_per_segment[streamer][\"7tv\"] = np.mean([sum(l.values()) for l in label_sets[\"7tv\"]])\n","    avg_per_segment[streamer][\"g-b\"] = np.mean([sum(l.values()) for l in label_sets[\"g-b\"]])\n","    avg_per_segment[streamer][\"g-7\"] = np.mean([sum(l.values()) for l in label_sets[\"g-7\"]])\n","    avg_per_segment[streamer][\"b-7\"] = np.mean([sum(l.values()) for l in label_sets[\"b-7\"]])\n","    emote_per_segment.extend([sum(l.values()) for l in label])\n","    print(\"Average number of emotes per segment:\", avg_per_segment[streamer][\"all\"])\n","    print(\"Global:\", emote_counts[streamer][\"global\"], \"| Distinct:\", len(emote_distinct[streamer][\"global\"]))\n","    print(\n","        \"BetterTTV:\",\n","        emote_counts[streamer][\"betterttv\"],\n","        \"| Distinct:\",\n","        len(emote_distinct[streamer][\"betterttv\"]),\n","    )\n","    print(\"7TV:\", emote_counts[streamer][\"7tv\"], \"| Distinct:\", len(emote_distinct[streamer][\"7tv\"]))\n","    print(\n","        \"7tv and BetterTTV overlaps:\",\n","        emote_counts[streamer][\"overlap\"],\n","        \"| Distinct:\",\n","        len(emote_distinct[streamer][\"overlap\"]),\n","    )\n","    print(\"=====================\")\n","\n","print(\"Average number of emotes per segment across all streams:\", np.mean(emote_per_segment))\n","with open(\"emote_stats.csv\", \"w\") as sheet:\n","    sheet.write(\n","        \"Streamer,Global,BetterTTV,7TV,BetterTTV - 7TV Overlap,,Global (d),BetterTTV (d),7TV (d),BetterTTV - 7TV Overlap (d),Avg emote per seg,Avg per seg (G),Avg per seg (B),Avg per seg (7),Avg per seg (G-B),Avg per seg (G-7),Avg per seg (B-7),Length,Total Emoticons\\n\"\n","    )\n","    for i, streamer in enumerate(streamers):\n","        row = f\"{streamer},{emote_counts[streamer]['global']},{emote_counts[streamer]['betterttv']},{emote_counts[streamer]['7tv']},{emote_counts[streamer]['overlap']},,{len(emote_distinct[streamer]['global'])},{len(emote_distinct[streamer]['betterttv'])},{len(emote_distinct[streamer]['7tv'])},{len(emote_distinct[streamer]['overlap'])},{avg_per_segment[streamer]['all']}\"\n","\n","        row += f\",{avg_per_segment[streamer]['global']},{avg_per_segment[streamer]['betterttv']},{avg_per_segment[streamer]['7tv']},{avg_per_segment[streamer]['g-b']},{avg_per_segment[streamer]['g-7']},{avg_per_segment[streamer]['b-7']}\"\n","        row += f\",{length_by_count['length'][i]},{length_by_count['count'][i]}\\n\"\n","        sheet.write(row)\n","with open(\"emotes.csv\", \"w\") as doc:\n","    doc.write(\"Global,BetterTTV,7TV\\n\")\n","    emotes7tv_list = list(sorted(EMOTES7TV))\n","    emotesbetterttv_list = list(sorted(EMOTESBETTERTTV))\n","    emotesglobal_list = list(sorted(GLOBAL_EMOTES))\n","    for i in range(max(len(EMOTES7TV), len(EMOTESBETTERTTV), len(GLOBAL_EMOTES))):\n","        if i < len(GLOBAL_EMOTES):\n","            doc.write(emotesglobal_list[i])\n","        doc.write(\",\")\n","        if i < len(EMOTESBETTERTTV):\n","            doc.write(emotesbetterttv_list[i])\n","        doc.write(\",\")\n","        if i < len(EMOTES7TV):\n","            doc.write(emotes7tv_list[i])\n","        doc.write(\"\\n\")\n","\n","# print(length_by_count)\n","# sorted_by_length = sorted(zip(length_by_count[\"length\"], length_by_count[\"count\"]), key=lambda t: t[0])\n","# plt.plot([t[0] for t in sorted_by_length], [t[1] for t in sorted_by_length])\n","# plt.xlabel(\"Length of Stream (HH:MM:SS)\")\n","# plt.ylabel(\"Number of Emotes\")\n","# plt.show()\n"]}]}